// Generated by dts-bundle-generator v9.0.0

import { Collection, CreateIndexesOptions, Db, Document, IndexSpecification, MongoClientOptions, ObjectId } from 'mongodb';

declare function migrate(db: Db, ...models: Manager<any>[]): Promise<void>;
declare function reindex(col: Collection<any>, { list }: IdxArgs): Promise<void>;
export declare abstract class Manager<DATA extends Document = Document> {
	abstract readonly colNm: string;
	abstract readonly migrate: FnMigrate<DATA>[];
	protected getCol(db: Db): Collection<DATA>;
}
export declare class KvManager extends Manager<Kv> {
	readonly colNm: string;
	readonly migrate: FnMigrate<Kv>[];
	constructor(...colNms: string[]);
	get<Input>(db: Db, key: string, ...defaults: Input[]): Promise<Input>;
	set<Input>(db: Db, key: string, value: Input): Promise<void>;
}
export declare const fnMongo: {
	reindex: typeof reindex;
	migrate: typeof migrate;
	one: <DATA extends import("mongodb").Document = import("mongodb").Document>(col: import("mongodb").Collection<DATA>, filter: object, ...sorts: import("mongodb").Sort[]) => Promise<DATA>;
	all: <DATA_1 extends import("mongodb").Document = import("mongodb").Document>(col: import("mongodb").Collection<DATA_1>, filter: object, ...sorts: import("mongodb").Sort[]) => Promise<DATA_1[]>;
	list: <DATA_2 extends import("mongodb").Document = import("mongodb").Document>(col: import("mongodb").Collection<DATA_2>, filter: object, pager: Pager, ...sorts: import("mongodb").Sort[]) => Promise<ResultList<DATA_2>>;
	connect: ({ host, username, password, database, opts }: ConnectArg) => Promise<import("mongodb").Db>;
	connectionFactory: (v: ConnectArg) => () => Promise<import("mongodb").Db>;
};
export interface ConnectArg {
	host: string;
	username: string;
	password: string;
	database: string;
	opts?: MongoClientOptions;
}
export interface IdxArgs {
	list: IdsElem[];
}
export interface Kv {
	_id: ObjectId;
	key: string;
	value: string;
	updatedAt: Date;
}
export interface ResultList<DATA extends Document = Document> {
	page: number;
	size: number;
	total: number;
	list: DATA[];
}
export type Bool = "true" | "false";
export type DateQuery = Partial<{
	$lt: Date;
	$lte: Date;
	$eq: Date;
	$gt: Date;
	$gte: Date;
}>;
export type FnMigrate<DATA extends Document = Document> = (col: Collection<DATA>) => Promise<void>;
export type IdsElem = [
	IndexSpecification,
	CreateIndexesOptions
];
export type Pager = {
	page: number;
	size: number;
};

export {};
