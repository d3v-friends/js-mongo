// Generated by dts-bundle-generator v9.0.0

import { Collection, Db, Document, ObjectId } from 'mongodb';

export declare abstract class Docs<DATA extends Document> {
	abstract readonly colNm: string;
	abstract readonly migrate: Migrate<DATA>[];
	abstract readonly db: Db;
	protected getCol(): Collection<DATA>;
}
export declare class DocKv extends Docs<Kv> {
	readonly colNm: string;
	readonly migrate: Migrate<Kv>[];
	readonly db: Db;
	constructor(db: Db, ...colNms: string[]);
	get<Input>(key: string, ...defaults: Input[]): Promise<Input>;
	set<Input>(key: string, value: Input): Promise<void>;
}
export declare namespace QueryHelper {
	type DateQuery = Partial<{
		$lt: Date;
		$lte: Date;
		$eq: Date;
		$gt: Date;
		$gte: Date;
	}>;
}
export interface Kv {
	_id: ObjectId;
	key: string;
	value: string;
	updatedAt: Date;
}
export type Bool = "true" | "false";
export type Migrate<DATA extends Document> = (col: Collection<DATA>) => Promise<void>;
export type Pager = {
	page: number;
	size: number;
};
export type ResultList<RES extends object> = {
	page: number;
	size: number;
	total: number;
	list: RES[];
};

export {};
